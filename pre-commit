#!/usr/bin/env bash
# This is a pre-commit hook that validates code formatting.
#
# Install this by running the script with an argument of "install",
# which installs a symlink to .git/hooks/precommit:
# $ ln -s ../../hooks/pre-commit .git/hooks/pre-commit

root="$(git rev-parse --show-toplevel 2>/dev/null)"

set -e

# Some sanity checking.
hash cargo
[[ -n "$root" ]]

# Installation.
if [[ "$1" == "install" ]]; then
    hook="$root"/.git/hooks/pre-commit
    if [[ ! -e "$hook" ]]; then
        ln -s ../../pre-commit "$hook"
        echo "Installed git pre-commit hook at $hook"
    else
        echo "Hook already installed"
    fi
    exit
fi

save_merge_files() {
    # Move MERGE_[HEAD|MODE|MSG] files to the root directory, and let `git stash push` save them.
    for f in "$root"/.git/MERGE_*; do
	if [[ -e "$f" ]]; then
            t=$(basename $f)
            mv -f "$f" "$t"
	fi
    done
}

restore_merge_files() {
    # Moves MERGE files restored by `git stash pop` back into .git/ directory.
    for f in MERGE_*; do
	if [[ -e "$f" ]]; then
	    if [[ -e "${root}/.git/${f}" ]]; then
		echo "Failed to restore ${f}. File already exists" 1>&2
	    else
		mv -f "$f" "${root}/.git/${f}"
	    fi
	fi
    done
}

# Check formatting.
stashfile=$(mktemp .pre-commit.stashXXXXXX)
trap 'set +e;git stash pop -q; rm -f "$stashfile"; restore_merge_files' EXIT
save_merge_files
git stash push -k -u -q -m "pre-commit stash"

fmtconfig="imports_granularity=Crate,group_imports=StdExternalCrate"
if ! errors=($(cargo fmt --all -- --check --config "$fmtconfig" -l)); then
    echo "Formatting errors found."
    echo "Run \`cargo fmt --all -- --config \"$fmtconfig\"\` to fix the following files:"
    for err in "${errors[@]}"; do
        echo "  $err"
    done
    exit 1
fi

check() {
    msg="$1"
    shift
    if "$@"; then
        echo "$msg: OK"
    else
        res=$?
        echo "-----------------------"
        echo "$msg: FAILED ($res)"
        echo "  ${@@Q}"
        exit $res
    fi
}

check "Benchmark compilation" \
    cargo build --benches --no-default-features --features "enable-benches descriptive-gate"

check "Clippy checks" \
    cargo clippy --tests -- -D warnings

check "Clippy concurrency checks" \
    cargo clippy --tests --features shuttle -- -D warnings

check "Clippy web checks" \
    cargo clippy --tests --no-default-features --features "cli web-app real-world-infra test-fixture descriptive-gate" -- -D warnings

check "Tests" \
    cargo test

check "Web tests" \
    cargo test -p ipa-core --no-default-features --features "cli web-app real-world-infra test-fixture descriptive-gate"

check "Concurrency tests" \
    cargo test -p ipa-core --release --features shuttle

check "IPA benchmark" \
    cargo bench --bench oneshot_ipa --no-default-features --features="enable-benches descriptive-gate" -- -n 62 -c 16

check "Arithmetic circuit benchmark" \
    cargo bench --bench oneshot_arithmetic --no-default-features --features "enable-benches descriptive-gate"
